// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  ADMIN
  DOCTOR
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String         @unique
  phone         String
  emailVerified DateTime?
  image         String?
  role          UserRole       @default(USER)
  plan          String?
  password      String
  accounts      Account[]
  sessions      Session[]
  doctorProfile DoctorProfile?

  serviceId String?  @db.ObjectId
  service   Service? @relation(fields: [serviceId], references: [id])

  specialityId String?     @db.ObjectId
  speciality   Speciality? @relation(fields: [specialityId], references: [id])

  symptomIds String[] @db.ObjectId

  isVerfied Boolean  @default(false)
  token     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Availability {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  doctorProfileId String        @unique @db.ObjectId
  doctorProfile   DoctorProfile @relation(fields: [doctorProfileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  monday          String[]
  tuesday         String[]
  wednesday       String[]
  thursday        String[]
  friday          String[]
  saturday        String[]
  sunday          String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Service {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  doctors        User[]
  title          String
  slug           String          @unique
  imageUrl       String
  doctorProfile DoctorProfile[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Speciality {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  doctors        User[]
  title          String[]
  slug           String          @unique
  doctorProfile DoctorProfile[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Symptom {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  slug  String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DoctorProfile {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  trackingNumber String        @unique
  firstName      String
  lastName       String
  middleName     String?
  dob            DateTime?
  gender         String
  availability   Availability?

  bio                  String?
  page                 String
  medicalLicense       String?
  profilePicture       String?
  yearsOfExperience    Int?
  medicalLicenseExpiry DateTime?

  email   String?
  phone   String?
  country String?
  city    String?
  state   String?

  medicalSchool         String?
  graduationYear        String?
  primarySpecialization String?
  otherSpecialities     String[]
  docCertificates       String[]

  clinicName             String?
  clinicAddress          String?
  clinicContactNumber    String?
  clinicEmailAddress     String?
  clinicWebsite          String?
  clinicHoursOfOperarion Int?
  servicesOffered        String[]
  insuranceAccepted      String?
  languagesSpoken        String?

  educationHistory String?
  research         String?
  accomplishments  String?
  additionalDocs   String[]

  createdAt    DateTime    @default(now())
  updatedAt    DateTime?   @updatedAt
  Service      Service?    @relation(fields: [serviceId], references: [id])
  serviceId    String?     @db.ObjectId
  Speciality   Speciality? @relation(fields: [specialityId], references: [id])
  specialityId String?     @db.ObjectId
}
